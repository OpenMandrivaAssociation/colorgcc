Author: <bdefreese@debian2.bddebian.com>
Description: Old local changes.
--- a/colorgcc
+++ b/colorgcc
@@ -1,4 +1,4 @@
-#! /usr/bin/perl -w
+#! /usr/bin/perl
 
 #
 # colorgcc
@@ -90,14 +90,10 @@
 
 use Term::ANSIColor;
 use IPC::Open3;
+use Cwd 'abs_path';
 
 sub initDefaults
 {
-   $compilerPaths{"gcc"} = "/usr/local/bin/gcc";
-   $compilerPaths{"g++"} = "/usr/local/bin/g++";
-   $compilerPaths{"cc"}  = "/usr/bin/cc";
-   $compilerPaths{"c++"} = "/usr/local/bin/c++";
-
    $nocolor{"dumb"} = "true";
 
    $colors{"srcColor"} = color("cyan");
@@ -128,7 +124,7 @@
       $option = $1;
       $value = $2;
 
-      if ($option =~ m/cc|c\+\+|gcc|g\+\+/)
+      if ($option =~ m/(.*)(cc|c\+\+|gcc|g\+\+|g77|gobjc|gnat|gcj|gpc)(.*)/)
       {
 	 $compilerPaths{$option} = $value;
       }
@@ -184,13 +180,45 @@
 if (-f $configFile)
 {
    loadPreferences($configFile);
+} elsif (-f '/etc/colorgcc/colorgccrc') {
+   loadPreferences('/etc/colorgcc/colorgccrc');
 }
 
 # Figure out which compiler to invoke based on our program name.
 $0 =~ m%.*/(.*)$%;
 $progName = $1 || $0;
 
-$compiler = $compilerPaths{$progName} || $compilerPaths{"gcc"};
+# See if the user asked for a specific compiler.
+if ($progName eq "colorgcc") {
+    $compiler = "/usr/bin/gcc";
+} elsif (!defined($compiler = $compilerPaths{$progName})) {
+    # Find our wrapper dir on the PATH and tweak the PATH to remove
+    # everything up-to and including our wrapper dir.
+    if ($0 =~ m#(.*)/#) {
+	# We were called with an explicit path, so trim that off the PATH.
+	my $find = $1;
+	$find = abs_path($1) unless $find =~ m#^/#;
+	$ENV{'PATH'} =~ s#.*(^|:)\Q$find\E(:|$)##;
+    }
+    else {
+	my(@dirs) = split(/:/, $ENV{'PATH'});
+	while (defined($_ = shift @dirs)) {
+	    if (-x "$_/$progName") {
+		$ENV{'PATH'} = join(':', @dirs);
+		last;
+	    }
+	}
+    }
+    $compiler = $progName;
+}
+
+# Raphael Bossek <bossekr@debian.org> Bug #48451
+#   We check if the user created a link from the selected compiler
+#   to colorgcc e.g. /usr/bin/gcc -> /usr/bin/colorgcc !
+if (-l $compiler and (stat $compiler)[1] == (stat $0)[1]) {
+    print "colorgcc: Error; $compiler is a symlink to colorgcc. Aborting.\n";
+    exit(1);
+}
 
 # Get the terminal type. 
 $terminal = $ENV{"TERM"} || "dumb";
@@ -210,7 +238,7 @@
 # Colorize the output from the compiler.
 while(<GCCOUT>)
 {
-   if (m/^(.*?):([0-9]+):(.*)$/) # filename:lineno:message
+   if (m#^(.+?\.[^:/ ]+):([0-9]+):(.*)$#) # filename:lineno:message
    {
       $field1 = $1 || "";
       $field2 = $2 || "";
@@ -232,6 +260,10 @@
       }
       print("\n");
    }
+   elsif (m/^:.+`.*'$/) # filename:message:
+   {
+      srcscan($_, $colors{"warningMessageColor"});
+   }
    elsif (m/^(.*?):(.+):$/) # filename:message:
    {
       # No line number, treat as an "introductory" line of text.
--- a/colorgccrc
+++ b/colorgccrc
@@ -20,12 +20,18 @@
 # For example, srcColor: bold cyan on_yellow
 #
 
-# Define the paths to the actual location of the various compilers.
-# (Currently, colorgcc only understands these: g++ gcc c++ cc)
-g++: /usr/local/bin/g++
-gcc: /usr/local/bin/gcc
-c++: /usr/local/bin/c++
-cc:  /usr/bin/cc
+# Only define the paths to the actual location of the various compilers if
+# you need to do something weird.  For normal installs, we'll figure out
+# who to call next automatically.
+# (Currently, colorgcc only understands these: g++ gcc c++ cc g77 gcj gnat gpc)
+# g++: /usr/bin/g++
+# gcc: /usr/bin/gcc
+# c++: /usr/bin/c++
+# cc:  /usr/bin/cc
+# g77: /usr/bin/g77
+# gcj: /usr/bin/gcj
+# gnat: /usr/bin/gnat
+# gpc: /usr/bin/gpc
 
 # Don't do color if our terminal type ($TERM) is one of these.
 # (List all terminal types on one line, seperated by whitespace.)
@@ -43,12 +49,10 @@
 
 # Warnings
 warningFileNameColor: reset
-warningNumberColor:   white
+warningNumberColor:   blue
 warningMessageColor:  yellow
 
 # Errors
 errorFileNameColor: reset
-errorNumberColor:   white
+errorNumberColor:   blue
 errorMessageColor:  bold red
-
-
